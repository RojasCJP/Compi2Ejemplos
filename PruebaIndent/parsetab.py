
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQGTLTleftPLUSMINUSleftMULTDIVASSIGN COLON COMMA DEDENT DEF DIV ENDMARKER EQ GT IF INDENT LPAR LT MINUS MULT NAME NEWLINE NUMBER PLUS RETURN RPAR SEMICOLON STRING WSfile_input_end : file_input ENDMARKERfile_input : file_input NEWLINE\n                  | file_input stmt\n                  | NEWLINE\n                  | stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPAR\n                  | LPAR varargslist RPARvarargslist : varargslist COMMA NAME\n                   | NAMEstmt : simple_stmtstmt : compound_stmtsimple_stmt : small_stmts NEWLINE\n                   | small_stmts SEMICOLON NEWLINEsmall_stmts : small_stmts SEMICOLON small_stmt\n                   | small_stmtsmall_stmt : flow_stmt\n                  | expr_stmtexpr_stmt : testlist ASSIGN testlist\n                 | testlist flow_stmt : return_stmtreturn_stmt : RETURN testlistcompound_stmt : if_stmt\n                     | funcdefif_stmt : IF test COLON suitesuite : simple_stmt\n             | NEWLINE INDENT stmts DEDENTstmts : stmts stmt\n             | stmtcomparison : comparison PLUS comparison\n                  | comparison MINUS comparison\n                  | comparison MULT comparison\n                  | comparison DIV comparison\n                  | comparison LT comparison\n                  | comparison EQ comparison\n                  | comparison GT comparison\n                  | PLUS comparison\n                  | MINUS comparison\n                  | powerpower : atom\n             | atom traileratom : NAMEatom : NUMBERatom : STRINGatom : LPAR testlist RPARtrailer : LPAR arglist RPARtestlist : testlist_multi COMMA\n                | testlist_multi testlist_multi : testlist_multi COMMA test\n                      | testtest : comparisonarglist : arglist COMMA argument\n               | argumentargument : test'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,12,14,15,16,17,18,20,21,24,25,26,27,30,31,32,33,37,38,46,47,48,51,52,53,56,57,58,59,60,61,62,63,64,68,69,70,72,76,79,86,],[3,30,-4,-5,-11,-12,32,-23,-24,-16,-50,-42,-17,-18,-21,-20,-48,-51,-39,-40,-43,-44,-2,-3,-13,51,-22,-47,-37,-38,-41,-14,-15,71,-19,-49,-30,-31,-32,-33,-34,-35,-36,-45,-25,-26,71,-46,-6,-27,]),'IF':([0,2,3,4,5,6,8,9,30,31,32,51,69,70,78,79,83,84,86,87,],[11,11,-4,-5,-11,-12,-23,-24,-2,-3,-13,-14,-25,-26,11,-6,11,-29,-27,-28,]),'DEF':([0,2,3,4,5,6,8,9,30,31,32,51,69,70,78,79,83,84,86,87,],[13,13,-4,-5,-11,-12,-23,-24,-2,-3,-13,-14,-25,-26,13,-6,13,-29,-27,-28,]),'RETURN':([0,2,3,4,5,6,8,9,30,31,32,33,51,53,69,70,72,78,79,83,84,86,87,],[19,19,-4,-5,-11,-12,-23,-24,-2,-3,-13,19,-14,19,-25,-26,19,19,-6,19,-29,-27,-28,]),'PLUS':([0,2,3,4,5,6,8,9,11,14,19,21,22,23,24,25,26,27,28,30,31,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,53,58,59,60,61,62,63,64,68,69,70,72,76,77,78,79,83,84,86,87,],[22,22,-4,-5,-11,-12,-23,-24,22,-42,22,39,22,22,-39,-40,-43,-44,22,-2,-3,-13,22,22,22,22,22,22,22,22,22,22,-37,-38,-41,22,-14,22,-30,-31,-32,-33,39,39,39,-45,-25,-26,22,-46,22,22,-6,22,-29,-27,-28,]),'MINUS':([0,2,3,4,5,6,8,9,11,14,19,21,22,23,24,25,26,27,28,30,31,32,33,36,38,39,40,41,42,43,44,45,46,47,48,49,51,53,58,59,60,61,62,63,64,68,69,70,72,76,77,78,79,83,84,86,87,],[23,23,-4,-5,-11,-12,-23,-24,23,-42,23,40,23,23,-39,-40,-43,-44,23,-2,-3,-13,23,23,23,23,23,23,23,23,23,23,-37,-38,-41,23,-14,23,-30,-31,-32,-33,40,40,40,-45,-25,-26,23,-46,23,23,-6,23,-29,-27,-28,]),'NAME':([0,2,3,4,5,6,8,9,11,13,19,22,23,28,30,31,32,33,36,38,39,40,41,42,43,44,45,49,51,53,55,69,70,72,77,78,79,81,83,84,86,87,],[14,14,-4,-5,-11,-12,-23,-24,14,35,14,14,14,14,-2,-3,-13,14,14,14,14,14,14,14,14,14,14,14,-14,14,75,-25,-26,14,14,14,-6,85,14,-29,-27,-28,]),'NUMBER':([0,2,3,4,5,6,8,9,11,19,22,23,28,30,31,32,33,36,38,39,40,41,42,43,44,45,49,51,53,69,70,72,77,78,79,83,84,86,87,],[26,26,-4,-5,-11,-12,-23,-24,26,26,26,26,26,-2,-3,-13,26,26,26,26,26,26,26,26,26,26,26,-14,26,-25,-26,26,26,26,-6,26,-29,-27,-28,]),'STRING':([0,2,3,4,5,6,8,9,11,19,22,23,28,30,31,32,33,36,38,39,40,41,42,43,44,45,49,51,53,69,70,72,77,78,79,83,84,86,87,],[27,27,-4,-5,-11,-12,-23,-24,27,27,27,27,27,-2,-3,-13,27,27,27,27,27,27,27,27,27,27,27,-14,27,-25,-26,27,27,27,-6,27,-29,-27,-28,]),'LPAR':([0,2,3,4,5,6,8,9,11,14,19,22,23,25,26,27,28,30,31,32,33,35,36,38,39,40,41,42,43,44,45,49,51,53,68,69,70,72,77,78,79,83,84,86,87,],[28,28,-4,-5,-11,-12,-23,-24,28,-42,28,28,28,49,-43,-44,28,-2,-3,-13,28,55,28,28,28,28,28,28,28,28,28,28,-14,28,-45,-25,-26,28,28,28,-6,28,-29,-27,-28,]),'$end':([1,29,],[0,-1,]),'ENDMARKER':([2,3,4,5,6,8,9,30,31,32,51,69,70,79,86,],[29,-4,-5,-11,-12,-23,-24,-2,-3,-13,-14,-25,-26,-6,-27,]),'DEDENT':([5,6,8,9,32,51,69,70,79,83,84,86,87,],[-11,-12,-23,-24,-13,-14,-25,-26,-6,86,-29,-27,-28,]),'SEMICOLON':([7,10,12,14,15,16,17,18,20,21,24,25,26,27,37,38,46,47,48,52,56,57,58,59,60,61,62,63,64,68,76,],[33,-16,-50,-42,-17,-18,-21,-20,-48,-51,-39,-40,-43,-44,-22,-47,-37,-38,-41,-15,-19,-49,-30,-31,-32,-33,-34,-35,-36,-45,-46,]),'COMMA':([12,14,20,21,24,25,26,27,46,47,48,57,58,59,60,61,62,63,64,65,66,67,68,74,75,76,82,85,],[-50,-42,38,-51,-39,-40,-43,-44,-37,-38,-41,-49,-30,-31,-32,-33,-34,-35,-36,77,-53,-54,-45,81,-10,-46,-52,-9,]),'ASSIGN':([12,14,18,20,21,24,25,26,27,38,46,47,48,57,58,59,60,61,62,63,64,68,76,],[-50,-42,36,-48,-51,-39,-40,-43,-44,-47,-37,-38,-41,-49,-30,-31,-32,-33,-34,-35,-36,-45,-46,]),'RPAR':([12,14,20,21,24,25,26,27,38,46,47,48,50,55,57,58,59,60,61,62,63,64,65,66,67,68,74,75,76,82,85,],[-50,-42,-48,-51,-39,-40,-43,-44,-47,-37,-38,-41,68,73,-49,-30,-31,-32,-33,-34,-35,-36,76,-53,-54,-45,80,-10,-46,-52,-9,]),'MULT':([14,21,24,25,26,27,46,47,48,58,59,60,61,62,63,64,68,76,],[-42,41,-39,-40,-43,-44,41,41,-41,41,41,-32,-33,41,41,41,-45,-46,]),'DIV':([14,21,24,25,26,27,46,47,48,58,59,60,61,62,63,64,68,76,],[-42,42,-39,-40,-43,-44,42,42,-41,42,42,-32,-33,42,42,42,-45,-46,]),'LT':([14,21,24,25,26,27,46,47,48,58,59,60,61,62,63,64,68,76,],[-42,43,-39,-40,-43,-44,-37,-38,-41,-30,-31,-32,-33,-34,-35,-36,-45,-46,]),'EQ':([14,21,24,25,26,27,46,47,48,58,59,60,61,62,63,64,68,76,],[-42,44,-39,-40,-43,-44,-37,-38,-41,-30,-31,-32,-33,-34,-35,-36,-45,-46,]),'GT':([14,21,24,25,26,27,46,47,48,58,59,60,61,62,63,64,68,76,],[-42,45,-39,-40,-43,-44,-37,-38,-41,-30,-31,-32,-33,-34,-35,-36,-45,-46,]),'COLON':([14,21,24,25,26,27,34,46,47,48,54,58,59,60,61,62,63,64,68,73,76,80,],[-42,-51,-39,-40,-43,-44,53,-37,-38,-41,72,-30,-31,-32,-33,-34,-35,-36,-45,-7,-46,-8,]),'INDENT':([71,],[78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file_input_end':([0,],[1,]),'file_input':([0,],[2,]),'stmt':([0,2,78,83,],[4,31,84,87,]),'simple_stmt':([0,2,53,72,78,83,],[5,5,70,70,5,5,]),'compound_stmt':([0,2,78,83,],[6,6,6,6,]),'small_stmts':([0,2,53,72,78,83,],[7,7,7,7,7,7,]),'if_stmt':([0,2,78,83,],[8,8,8,8,]),'funcdef':([0,2,78,83,],[9,9,9,9,]),'small_stmt':([0,2,33,53,72,78,83,],[10,10,52,10,10,10,10,]),'test':([0,2,11,19,28,33,36,38,49,53,72,77,78,83,],[12,12,34,12,12,12,12,57,67,12,12,67,12,12,]),'flow_stmt':([0,2,33,53,72,78,83,],[15,15,15,15,15,15,15,]),'expr_stmt':([0,2,33,53,72,78,83,],[16,16,16,16,16,16,16,]),'return_stmt':([0,2,33,53,72,78,83,],[17,17,17,17,17,17,17,]),'testlist':([0,2,19,28,33,36,53,72,78,83,],[18,18,37,50,18,56,18,18,18,18,]),'testlist_multi':([0,2,19,28,33,36,53,72,78,83,],[20,20,20,20,20,20,20,20,20,20,]),'comparison':([0,2,11,19,22,23,28,33,36,38,39,40,41,42,43,44,45,49,53,72,77,78,83,],[21,21,21,21,46,47,21,21,21,21,58,59,60,61,62,63,64,21,21,21,21,21,21,]),'power':([0,2,11,19,22,23,28,33,36,38,39,40,41,42,43,44,45,49,53,72,77,78,83,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'atom':([0,2,11,19,22,23,28,33,36,38,39,40,41,42,43,44,45,49,53,72,77,78,83,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'trailer':([25,],[48,]),'parameters':([35,],[54,]),'arglist':([49,],[65,]),'argument':([49,77,],[66,82,]),'suite':([53,72,],[69,79,]),'varargslist':([55,],[74,]),'stmts':([78,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file_input_end","S'",1,None,None,None),
  ('file_input_end -> file_input ENDMARKER','file_input_end',2,'p_file_input_end','DummieGrammar.py',285),
  ('file_input -> file_input NEWLINE','file_input',2,'p_file_input','DummieGrammar.py',289),
  ('file_input -> file_input stmt','file_input',2,'p_file_input','DummieGrammar.py',290),
  ('file_input -> NEWLINE','file_input',1,'p_file_input','DummieGrammar.py',291),
  ('file_input -> stmt','file_input',1,'p_file_input','DummieGrammar.py',292),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','DummieGrammar.py',305),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters','DummieGrammar.py',309),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters','DummieGrammar.py',310),
  ('varargslist -> varargslist COMMA NAME','varargslist',3,'p_varargslist','DummieGrammar.py',317),
  ('varargslist -> NAME','varargslist',1,'p_varargslist','DummieGrammar.py',318),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_simple','DummieGrammar.py',325),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_compound','DummieGrammar.py',330),
  ('simple_stmt -> small_stmts NEWLINE','simple_stmt',2,'p_simple_stmt','DummieGrammar.py',334),
  ('simple_stmt -> small_stmts SEMICOLON NEWLINE','simple_stmt',3,'p_simple_stmt','DummieGrammar.py',335),
  ('small_stmts -> small_stmts SEMICOLON small_stmt','small_stmts',3,'p_small_stmts','DummieGrammar.py',339),
  ('small_stmts -> small_stmt','small_stmts',1,'p_small_stmts','DummieGrammar.py',340),
  ('small_stmt -> flow_stmt','small_stmt',1,'p_small_stmt','DummieGrammar.py',347),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','DummieGrammar.py',348),
  ('expr_stmt -> testlist ASSIGN testlist','expr_stmt',3,'p_expr_stmt','DummieGrammar.py',352),
  ('expr_stmt -> testlist','expr_stmt',1,'p_expr_stmt','DummieGrammar.py',353),
  ('flow_stmt -> return_stmt','flow_stmt',1,'p_flow_stmt','DummieGrammar.py',361),
  ('return_stmt -> RETURN testlist','return_stmt',2,'p_return_stmt','DummieGrammar.py',365),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','DummieGrammar.py',369),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','DummieGrammar.py',370),
  ('if_stmt -> IF test COLON suite','if_stmt',4,'p_if_stmt','DummieGrammar.py',374),
  ('suite -> simple_stmt','suite',1,'p_suite','DummieGrammar.py',378),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','DummieGrammar.py',379),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','DummieGrammar.py',386),
  ('stmts -> stmt','stmts',1,'p_stmts','DummieGrammar.py',387),
  ('comparison -> comparison PLUS comparison','comparison',3,'p_comparison','DummieGrammar.py',416),
  ('comparison -> comparison MINUS comparison','comparison',3,'p_comparison','DummieGrammar.py',417),
  ('comparison -> comparison MULT comparison','comparison',3,'p_comparison','DummieGrammar.py',418),
  ('comparison -> comparison DIV comparison','comparison',3,'p_comparison','DummieGrammar.py',419),
  ('comparison -> comparison LT comparison','comparison',3,'p_comparison','DummieGrammar.py',420),
  ('comparison -> comparison EQ comparison','comparison',3,'p_comparison','DummieGrammar.py',421),
  ('comparison -> comparison GT comparison','comparison',3,'p_comparison','DummieGrammar.py',422),
  ('comparison -> PLUS comparison','comparison',2,'p_comparison','DummieGrammar.py',423),
  ('comparison -> MINUS comparison','comparison',2,'p_comparison','DummieGrammar.py',424),
  ('comparison -> power','comparison',1,'p_comparison','DummieGrammar.py',425),
  ('power -> atom','power',1,'p_power','DummieGrammar.py',437),
  ('power -> atom trailer','power',2,'p_power','DummieGrammar.py',438),
  ('atom -> NAME','atom',1,'p_atom_name','DummieGrammar.py',449),
  ('atom -> NUMBER','atom',1,'p_atom_number','DummieGrammar.py',454),
  ('atom -> STRING','atom',1,'p_atom_string','DummieGrammar.py',458),
  ('atom -> LPAR testlist RPAR','atom',3,'p_atom_tuple','DummieGrammar.py',462),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','DummieGrammar.py',466),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','DummieGrammar.py',470),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','DummieGrammar.py',471),
  ('testlist_multi -> testlist_multi COMMA test','testlist_multi',3,'p_testlist_multi','DummieGrammar.py',486),
  ('testlist_multi -> test','testlist_multi',1,'p_testlist_multi','DummieGrammar.py',487),
  ('test -> comparison','test',1,'p_test','DummieGrammar.py',499),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','DummieGrammar.py',503),
  ('arglist -> argument','arglist',1,'p_arglist','DummieGrammar.py',504),
  ('argument -> test','argument',1,'p_argument','DummieGrammar.py',511),
]
